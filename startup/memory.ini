; these are configuration settings for the memory tracking system. These
; are in a separate INI file so they are available immediately upon program
; initialization, long before our app's Settings system is initialized.

[Memory]
; if false, the memory tracker will have zero runtime performance impact.
use_memory_tracker = false

; options are Simple, Advanced, XML. Simple gives basic information, Advanced
; gives more diagnostics, XML is formatted for external analysis.
output_format = Advanced 

; options are OutputNothing which means that no logging is done for each individual
; allocation (although the stack trace might still be saved for the end-of-run report.)
; OutputActionOnly which just logs that a memory event took place.
; OutputCallstackMallocReallocOnly which logs the callstack at the time of each malloc and realloc.
; OutputCallstackAlways which logs the callstack for every memory event as soon as it occurs.
alloc_time_output_level = OutputNothing

; if true, every time an allocation takes place, the callstack from the point of allocation is
; saved for possible inclusion in the end-of-run memory report. (approximate 5-10x execution time
; increase if this is true.)
save_stack_trace = false

; the number of bytes of stack info to save if save_stack_trace is true. 256 bytes seems to be
; about 5 or 6 functions.
stack_trace_bytes = 412

; this is the log file, including relative path from the working directory, to save results to.
; special value is NULL which means use display output only (visible in the debugger)
log_file = Logs/Memory.log

; this is a number between 0 and 65535 that is the number of allocations
; before a full heap walk will be performed to validate memory by looking
; for corruptions and inconsistencies. 0 means don't check.
allocs_per_heap_validation = 0

; this also tracks internal allocations made by the C Runtime Library, normally false since
; spurious leaks show up with this option on because of how C++ programs get shut down.
include_crt_allocs = true

; if this is true, the end-of-run memory report will show all allocations that took place over
; the course of the run, if false, only leaked blocks are shown. Normally false, since the
; report will be huge if including all allocs.
report_all_allocations = true

; there must be a corresponding Pool_### section for each of the num_pools
[Pools]
num_pools = 5

[Pool_000]
name = General_8_Byte
entry_size = 8
starting_entries = 200000
grow_entries = 20000

[Pool_001]
name = General_16_Byte
entry_size = 16
starting_entries = 500000
grow_entries = 50000

[Pool_002]
name = General_32_Byte
entry_size = 32
starting_entries = 300000
grow_entries = 30000

[Pool_003]
name = General_64_Byte
entry_size = 64
starting_entries = 280000
grow_entries = 28000

[Pool_004]
name = General_128_Byte
entry_size = 128
starting_entries = 110000
grow_entries = 11000
